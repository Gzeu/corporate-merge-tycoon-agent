# Corporate Merge Tycoon Agent - Docker Compose Stack
# Complete production environment with all services
# Author: George Pricop (@Gzeu)

version: '3.8'

services:
  # Main Corporate Merge Tycoon Agent
  corporate-merge-tycoon-agent:
    build:
      context: .
      dockerfile: Dockerfile
    image: gzeu/corporate-merge-tycoon-agent:1.0.0
    container_name: corporate-merge-tycoon-agent
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - API_PORT=3000
      - API_HOST=0.0.0.0
      - MVX_NETWORK=mainnet
      - MVX_GATEWAY_URL=https://gateway.multiversx.com
      - MVX_API_URL=https://api.multiversx.com
      - MVX_CHAIN_ID=1
      - MONGODB_URI=mongodb://mongodb:27017/corporate-merge-tycoon
      - REDIS_URL=redis://redis:6379
    volumes:
      - agent_logs:/app/logs
      - agent_data:/app/data
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - corporate-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: corporate-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=SecurePassword123!
      - MONGO_INITDB_DATABASE=corporate-merge-tycoon
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - corporate-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: corporate-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass RedisPassword123!
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - corporate-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: corporate-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - corporate-merge-tycoon-agent
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - corporate-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: corporate-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - corporate-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: corporate-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaPassword123!
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - corporate-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: corporate-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - corporate-network

volumes:
  agent_logs:
    driver: local
  agent_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  corporate-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment commands:
# docker-compose up -d                    # Start all services
# docker-compose logs -f                  # View logs
# docker-compose ps                       # Check status
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop and remove volumes
# docker-compose exec corporate-merge-tycoon-agent sh  # Access container